{
  "address": "0x75782A57c6522B8B17FCc01Ff11759f4535b2752",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        }
      ],
      "name": "PairCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeRate",
          "type": "uint256"
        }
      ],
      "name": "SetFeeRate",
      "type": "event"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "INIT_CODE_PAIR_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allPairs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "allPairsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "createPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "feeTo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getFeeRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "name": "setAdmin",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_feeRate",
          "type": "uint256"
        }
      ],
      "name": "setFeeRate",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeTo",
          "type": "address"
        }
      ],
      "name": "setFeeTo",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "state",
      "outputs": [
        {
          "internalType": "enum INoahFactory.State",
          "name": "",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "toggleState",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb00fed23aac53cb8c80dbb2d52cbdf883e789c7215cb7cbcdb05e0ffc6ee7790",
  "receipt": {
    "to": "0x0000000000000000000000000000000000000000",
    "from": "0xe4D68a77714D9D388d8233bee18d578559950cF5",
    "contractAddress": "0x75782A57c6522B8B17FCc01Ff11759f4535b2752",
    "transactionIndex": 0,
    "gasUsed": "3541292",
    "logsBloom": "0x
    "blockHash": "0x3f70348a3fbdc7b6625a4effcf97c3063a06a798315ba30c9f018bc169722d90",
    "transactionHash": "0xb00fed23aac53cb8c80dbb2d52cbdf883e789c7215cb7cbcdb05e0ffc6ee7790",
    "logs": [],
    "blockNumber": 778803,
    "cumulativeGasUsed": "3541292",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xe4D68a77714D9D388d8233bee18d578559950cF5"
  ],
  "numDeployments": 1,
  "solcInputHash": "504901bdb1218e0071a15c195ab9918d",
  "metadata": "{\"compiler\":{\"version\":\"0.5.16+commit.9c3226ce\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"PairCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeRate\",\"type\":\"uint256\"}],\"name\":\"SetFeeRate\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"INIT_CODE_PAIR_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allPairsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_feeRate\",\"type\":\"uint256\"}],\"name\":\"setFeeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"internalType\":\"enum INoahFactory.State\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"toggleState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/NoahFactory.sol\":\"NoahFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"contracts/NoahERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity =0.5.16;\\r\\n\\r\\nimport \\\"./interfaces/INoahERC20.sol\\\";\\r\\nimport \\\"./libraries/SafeMath.sol\\\";\\r\\n\\r\\ncontract NoahERC20 is INoahERC20 {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    string public constant name = \\\"Noah LPs\\\";\\r\\n    string public constant symbol = \\\"Noah-LP\\\";\\r\\n    uint8 public constant decimals = 18;\\r\\n    uint256 public totalSupply;\\r\\n    mapping(address => uint256) public balanceOf;\\r\\n    mapping(address => mapping(address => uint256)) public allowance;\\r\\n\\r\\n    bytes32 public DOMAIN_SEPARATOR;\\r\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\r\\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\r\\n    mapping(address => uint256) public nonces;\\r\\n\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    constructor() public {\\r\\n        uint256 chainId;\\r\\n        assembly {\\r\\n            chainId := chainid\\r\\n        }\\r\\n        DOMAIN_SEPARATOR = keccak256(\\r\\n            abi.encode(\\r\\n                keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\r\\n                keccak256(bytes(name)),\\r\\n                keccak256(bytes(\\\"1\\\")),\\r\\n                chainId,\\r\\n                address(this)\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _mint(address to, uint256 value) internal {\\r\\n        totalSupply = totalSupply.add(value);\\r\\n        balanceOf[to] = balanceOf[to].add(value);\\r\\n        emit Transfer(address(0), to, value);\\r\\n    }\\r\\n\\r\\n    function _burn(address from, uint256 value) internal {\\r\\n        balanceOf[from] = balanceOf[from].sub(value);\\r\\n        totalSupply = totalSupply.sub(value);\\r\\n        emit Transfer(from, address(0), value);\\r\\n    }\\r\\n\\r\\n    function _approve(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) private {\\r\\n        allowance[owner][spender] = value;\\r\\n        emit Approval(owner, spender, value);\\r\\n    }\\r\\n\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) private {\\r\\n        balanceOf[from] = balanceOf[from].sub(value);\\r\\n        balanceOf[to] = balanceOf[to].add(value);\\r\\n        emit Transfer(from, to, value);\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 value) external returns (bool) {\\r\\n        _approve(msg.sender, spender, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool) {\\r\\n        _transfer(msg.sender, to, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) external returns (bool) {\\r\\n        if (allowance[from][msg.sender] != uint256(-1)) {\\r\\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\\r\\n        }\\r\\n        _transfer(from, to, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external {\\r\\n        require(deadline >= block.timestamp, \\\"Noah: EXPIRED\\\");\\r\\n        bytes32 digest = keccak256(\\r\\n            abi.encodePacked(\\r\\n                \\\"\\\\x19\\\\x01\\\",\\r\\n                DOMAIN_SEPARATOR,\\r\\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\\r\\n            )\\r\\n        );\\r\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\r\\n        require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"Noah: INVALID_SIGNATURE\\\");\\r\\n        _approve(owner, spender, value);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xdc78a60620dfabfffdb7a98b7b030cfd2305f5776782747704741a9774659603\"},\"contracts/NoahFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity =0.5.16;\\r\\n\\r\\nimport './interfaces/INoahFactory.sol';\\r\\nimport './NoahPair.sol';\\r\\n\\r\\ncontract NoahFactory is INoahFactory {\\r\\n    bytes32 public constant INIT_CODE_PAIR_HASH = keccak256(abi.encodePacked(type(NoahPair).creationCode));\\r\\n    address public feeTo;\\r\\n    address public admin;\\r\\n\\r\\n    mapping(address => mapping(address => address)) public getPair;\\r\\n    mapping(address => uint256) public getFeeRate;\\r\\n    address[] public allPairs;\\r\\n    State public state;\\r\\n\\r\\n    constructor(address _admin) public {\\r\\n        admin = _admin;\\r\\n        state = State.Active;\\r\\n    }\\r\\n\\r\\n    function allPairsLength() external view returns (uint) {\\r\\n        return allPairs.length;\\r\\n    }\\r\\n\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair) {\\r\\n        require(tokenA != tokenB, 'Noah: IDENTICAL_ADDRESSES');\\r\\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\r\\n        require(token0 != address(0), 'Noah: ZERO_ADDRESS');\\r\\n        require(getPair[token0][token1] == address(0), 'Noah: PAIR_EXISTS'); // single check is sufficient\\r\\n        bytes memory bytecode = type(NoahPair).creationCode;\\r\\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1));\\r\\n        assembly {\\r\\n            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\\r\\n        }\\r\\n        INoahPair(pair).initialize(token0, token1);\\r\\n        getPair[token0][token1] = pair;\\r\\n        getPair[token1][token0] = pair; // populate mapping in the reverse direction\\r\\n        allPairs.push(pair);\\r\\n\\r\\n        getFeeRate[pair] = 30;\\r\\n        emit PairCreated(token0, token1, pair, allPairs.length);\\r\\n    }\\r\\n\\r\\n    function setFeeTo(address _feeTo) external {\\r\\n        require(msg.sender == admin, 'Noah: FORBIDDEN');\\r\\n        feeTo = _feeTo;\\r\\n    }\\r\\n\\r\\n    function setAdmin(address _admin) external {\\r\\n        require(_admin != address(0), 'Noah: ZERO_ADDRESS');\\r\\n        require(msg.sender == admin, 'Noah: FORBIDDEN');\\r\\n        admin = _admin;\\r\\n    }\\r\\n\\r\\n    function setFeeRate(address pair, uint256 _feeRate) external {\\r\\n        require(msg.sender == admin, 'Noah: FORBIDDEN');\\r\\n        require(_feeRate <= 100, 'Noah: FEE_REATE_LIMIT');\\r\\n        getFeeRate[pair] = _feeRate;\\r\\n\\r\\n        emit SetFeeRate(pair, _feeRate);\\r\\n    }\\r\\n\\r\\n    function toggleState() external {\\r\\n        require(msg.sender == admin, 'Noah: FORBIDDEN');\\r\\n        if(state == State.Active){\\r\\n            state = State.Pending;\\r\\n        }else{\\r\\n            state = State.Active;\\r\\n        } \\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x57af86fa4c3096ec26e49d32a5e8b5f65ad75cc4f3888ac0609d9055606d7b01\"},\"contracts/NoahPair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity =0.5.16;\\r\\n\\r\\nimport './interfaces/INoahPair.sol';\\r\\nimport './NoahERC20.sol';\\r\\nimport './libraries/Math.sol';\\r\\nimport './libraries/UQ112x112.sol';\\r\\nimport './interfaces/IERC20.sol';\\r\\nimport './interfaces/INoahFactory.sol';\\r\\nimport './interfaces/INoahCallee.sol';\\r\\n\\r\\ncontract NoahPair is INoahPair, NoahERC20 {\\r\\n    using SafeMath  for uint;\\r\\n    using UQ112x112 for uint224;\\r\\n\\r\\n    uint public constant MINIMUM_LIQUIDITY = 10**3;\\r\\n    bytes4 private constant SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));\\r\\n\\r\\n    address public factory;\\r\\n    address public token0;\\r\\n    address public token1;\\r\\n\\r\\n    uint112 private reserve0;           // uses single storage slot, accessible via getReserves\\r\\n    uint112 private reserve1;           // uses single storage slot, accessible via getReserves\\r\\n    uint32  private blockTimestampLast; // uses single storage slot, accessible via getReserves\\r\\n\\r\\n    uint public price0CumulativeLast;\\r\\n    uint public price1CumulativeLast;\\r\\n    uint public kLast; // reserve0 * reserve1, as of immediately after the most recent liquidity event\\r\\n\\r\\n    uint private unlocked = 1;\\r\\n    modifier lock() {\\r\\n        require(unlocked == 1, 'Noah: LOCKED');\\r\\n        unlocked = 0;\\r\\n        _;\\r\\n        unlocked = 1;\\r\\n    }\\r\\n    modifier state() {\\r\\n        require(INoahFactory(factory).state() == INoahFactory.State.Active, 'Noah: PENDING');\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function getReserves() public view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast) {\\r\\n        _reserve0 = reserve0;\\r\\n        _reserve1 = reserve1;\\r\\n        _blockTimestampLast = blockTimestampLast;\\r\\n    }\\r\\n\\r\\n    function _safeTransfer(address token, address to, uint value) private {\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'Noah: TRANSFER_FAILED');\\r\\n    }\\r\\n\\r\\n    constructor() public {\\r\\n        factory = msg.sender;\\r\\n    }\\r\\n\\r\\n    // called once by the factory at time of deployment\\r\\n    function initialize(address _token0, address _token1) external {\\r\\n        require(msg.sender == factory, 'Noah: FORBIDDEN'); // sufficient check\\r\\n        token0 = _token0;\\r\\n        token1 = _token1;\\r\\n    }\\r\\n\\r\\n    // update reserves and, on the first call per block, price accumulators\\r\\n    function _update(uint balance0, uint balance1, uint112 _reserve0, uint112 _reserve1) private {\\r\\n        require(balance0 <= uint112(-1) && balance1 <= uint112(-1), 'Noah: OVERFLOW');\\r\\n        uint32 blockTimestamp = uint32(block.timestamp % 2**32);\\r\\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\\r\\n        if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\\r\\n            // * never overflows, and + overflow is desired\\r\\n            price0CumulativeLast += uint(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) * timeElapsed;\\r\\n            price1CumulativeLast += uint(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) * timeElapsed;\\r\\n        }\\r\\n        reserve0 = uint112(balance0);\\r\\n        reserve1 = uint112(balance1);\\r\\n        blockTimestampLast = blockTimestamp;\\r\\n        emit Sync(reserve0, reserve1, totalSupply);\\r\\n    }\\r\\n\\r\\n    // if fee is on, mint liquidity equivalent to 1/3 of the growth in sqrt(k)\\r\\n    function _mintFee(uint112 _reserve0, uint112 _reserve1) private returns (bool feeOn) {\\r\\n        address feeTo = INoahFactory(factory).feeTo();\\r\\n        feeOn = feeTo != address(0);\\r\\n        uint _kLast = kLast; // gas savings\\r\\n        if (feeOn) {\\r\\n            if (_kLast != 0) {\\r\\n                uint rootK = Math.sqrt(uint(_reserve0).mul(_reserve1));\\r\\n                uint rootKLast = Math.sqrt(_kLast);\\r\\n                if (rootK > rootKLast) {\\r\\n                    uint numerator = totalSupply.mul(rootK.sub(rootKLast));\\r\\n                    uint denominator = rootK.mul(2).add(rootKLast);\\r\\n                    uint liquidity = numerator / denominator;\\r\\n                    if (liquidity > 0) _mint(feeTo, liquidity);\\r\\n                }\\r\\n            }\\r\\n        } else if (_kLast != 0) {\\r\\n            kLast = 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // this low-level function should be called from a contract which performs important safety checks\\r\\n    function mint(address to) external lock state returns (uint liquidity) {\\r\\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\\r\\n        uint balance0 = IERC20(token0).balanceOf(address(this));\\r\\n        uint balance1 = IERC20(token1).balanceOf(address(this));\\r\\n        uint amount0 = balance0.sub(_reserve0);\\r\\n        uint amount1 = balance1.sub(_reserve1);\\r\\n\\r\\n        bool feeOn = _mintFee(_reserve0, _reserve1);\\r\\n        uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\\r\\n        if (_totalSupply == 0) {\\r\\n            liquidity = Math.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);\\r\\n           _mint(address(0), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\\r\\n        } else {\\r\\n            liquidity = Math.min(amount0.mul(_totalSupply) / _reserve0, amount1.mul(_totalSupply) / _reserve1);\\r\\n        }\\r\\n        require(liquidity > 0, 'Noah: INSUFFICIENT_LIQUIDITY_MINTED');\\r\\n        _mint(to, liquidity);\\r\\n\\r\\n        _update(balance0, balance1, _reserve0, _reserve1);\\r\\n        if (feeOn) kLast = uint(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\\r\\n        uint balance = balanceOf[to];\\r\\n        emit Mint(msg.sender, amount0, amount1, balance, liquidity);\\r\\n    }\\r\\n\\r\\n    // this low-level function should be called from a contract which performs important safety checks\\r\\n    function burn(address to) external lock state returns (uint amount0, uint amount1) {\\r\\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\\r\\n        address _token0 = token0;                                // gas savings\\r\\n        address _token1 = token1;                                // gas savings\\r\\n        uint balance0 = IERC20(_token0).balanceOf(address(this));\\r\\n        uint balance1 = IERC20(_token1).balanceOf(address(this));\\r\\n        uint liquidity = balanceOf[address(this)];\\r\\n\\r\\n        bool feeOn = _mintFee(_reserve0, _reserve1);\\r\\n        uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\\r\\n        amount0 = liquidity.mul(balance0) / _totalSupply; // using balances ensures pro-rata distribution\\r\\n        amount1 = liquidity.mul(balance1) / _totalSupply; // using balances ensures pro-rata distribution\\r\\n        require(amount0 > 0 && amount1 > 0, 'Noah: INSUFFICIENT_LIQUIDITY_BURNED');\\r\\n        _burn(address(this), liquidity);\\r\\n        _safeTransfer(_token0, to, amount0);\\r\\n        _safeTransfer(_token1, to, amount1);\\r\\n        balance0 = IERC20(_token0).balanceOf(address(this));\\r\\n        balance1 = IERC20(_token1).balanceOf(address(this));\\r\\n\\r\\n        _update(balance0, balance1, _reserve0, _reserve1);\\r\\n        if (feeOn) kLast = uint(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\\r\\n        uint balance = balanceOf[to];\\r\\n        emit Burn(msg.sender, amount0, amount1, to, balance, liquidity);\\r\\n    }\\r\\n\\r\\n    // this low-level function should be called from a contract which performs important safety checks\\r\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external lock state {\\r\\n        require(amount0Out > 0 || amount1Out > 0, 'Noah: INSUFFICIENT_OUTPUT_AMOUNT');\\r\\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\\r\\n        require(amount0Out < _reserve0 && amount1Out < _reserve1, 'Noah: INSUFFICIENT_LIQUIDITY');\\r\\n\\r\\n        uint balance0;\\r\\n        uint balance1;\\r\\n        { // scope for _token{0,1}, avoids stack too deep errors\\r\\n        address _token0 = token0;\\r\\n        address _token1 = token1;\\r\\n        require(to != _token0 && to != _token1, 'Noah: INVALID_TO');\\r\\n        if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\\r\\n        if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\\r\\n        if (data.length > 0) INoahCallee(to).noahCall(msg.sender, amount0Out, amount1Out, data);\\r\\n        balance0 = IERC20(_token0).balanceOf(address(this));\\r\\n        balance1 = IERC20(_token1).balanceOf(address(this));\\r\\n        }\\r\\n        uint amount0In = balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;\\r\\n        uint amount1In = balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;\\r\\n        require(amount0In > 0 || amount1In > 0, 'Noah: INSUFFICIENT_INPUT_AMOUNT');\\r\\n        { // scope for reserve{0,1}Adjusted, avoids stack too deep errors\\r\\n        uint256 feeRate = INoahFactory(factory).getFeeRate(address(this));\\r\\n        uint balance0Adjusted = (balance0.mul(10000).sub(amount0In.mul(feeRate)));\\r\\n        uint balance1Adjusted = (balance1.mul(10000).sub(amount1In.mul(feeRate)));\\r\\n        require(balance0Adjusted.mul(balance1Adjusted) >= uint(_reserve0).mul(_reserve1).mul(10000**2), 'Noah: K');\\r\\n        }\\r\\n\\r\\n        _update(balance0, balance1, _reserve0, _reserve1);\\r\\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\\r\\n    }\\r\\n\\r\\n    // force balances to match reserves\\r\\n    function skim(address to) external lock {\\r\\n        address _token0 = token0; // gas savings\\r\\n        address _token1 = token1; // gas savings\\r\\n        _safeTransfer(_token0, to, IERC20(_token0).balanceOf(address(this)).sub(reserve0));\\r\\n        _safeTransfer(_token1, to, IERC20(_token1).balanceOf(address(this)).sub(reserve1));\\r\\n    }\\r\\n\\r\\n    // force reserves to match balances\\r\\n    function sync() external lock {\\r\\n        _update(IERC20(token0).balanceOf(address(this)), IERC20(token1).balanceOf(address(this)), reserve0, reserve1);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf1c36ed098571269e50129542698d2c4f52da4adcb29e670e6a95f5f2bdd6ff7\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IERC20 {\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint256);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 value) external returns (bool);\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x4279363aa38c746de00b366364e737a46ff94655551d49a6234a9187f8a09db6\"},\"contracts/interfaces/INoahCallee.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface INoahCallee {\\r\\n    function noahCall(\\r\\n        address sender,\\r\\n        uint256 amount0,\\r\\n        uint256 amount1,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x371923f1ab88fcb1be35082ee91bed2f5948781d7cf7896cbcf9faf07940ac1c\"},\"contracts/interfaces/INoahERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface INoahERC20 {\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n\\r\\n    function symbol() external pure returns (string memory);\\r\\n\\r\\n    function decimals() external pure returns (uint8);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint256);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 value) external returns (bool);\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n\\r\\n    function nonces(address owner) external view returns (uint256);\\r\\n\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x7c9a5f47bb6a9efbc3fcfca0b112d3750eafb677e9c73c781376b4374c4ed42c\"},\"contracts/interfaces/INoahFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface INoahFactory {\\r\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256 pid);\\r\\n    event SetFeeRate(address indexed pair,  uint256 feeRate);\\r\\n    \\r\\n    // Returns uint\\r\\n    // Pending  - 0\\r\\n    // Active  - 1\\r\\n    enum State {Pending, Active}\\r\\n\\r\\n    function state() external view returns (State);\\r\\n    \\r\\n    function feeTo() external view returns (address);\\r\\n\\r\\n    function admin() external view returns (address);\\r\\n\\r\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n\\r\\n    function getFeeRate(address pair) external view returns (uint256 feeRate);\\r\\n\\r\\n    function allPairs(uint256) external view returns (address pair);\\r\\n\\r\\n    function allPairsLength() external view returns (uint256);\\r\\n\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n\\r\\n    function setFeeTo(address) external;\\r\\n\\r\\n    function setAdmin(address) external;\\r\\n\\r\\n    function setFeeRate(address pair, uint256 _feeRate) external;\\r\\n    \\r\\n    function toggleState() external;\\r\\n\\r\\n    function INIT_CODE_PAIR_HASH() external view returns (bytes32);\\r\\n}\\r\\n\",\"keccak256\":\"0xb61f400edf44b6048a9d49811bc2f2175743b6a70ee38094aa5f0536666c14cf\"},\"contracts/interfaces/INoahPair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface INoahPair {\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n\\r\\n    function symbol() external pure returns (string memory);\\r\\n\\r\\n    function decimals() external pure returns (uint8);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint256);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 value) external returns (bool);\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n\\r\\n    function nonces(address owner) external view returns (uint256);\\r\\n\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1, uint256 balance, uint256 liquidity);\\r\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to, uint256 balance, uint256 liquidity);\\r\\n\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        uint256 amount0In,\\r\\n        uint256 amount1In,\\r\\n        uint256 amount0Out,\\r\\n        uint256 amount1Out,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Sync(uint112 reserve0, uint112 reserve1, uint256 totalSupply);\\r\\n\\r\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\r\\n\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    function getReserves()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint112 reserve0,\\r\\n            uint112 reserve1,\\r\\n            uint32 blockTimestampLast\\r\\n        );\\r\\n\\r\\n    function price0CumulativeLast() external view returns (uint256);\\r\\n\\r\\n    function price1CumulativeLast() external view returns (uint256);\\r\\n\\r\\n    function kLast() external view returns (uint256);\\r\\n\\r\\n    function mint(address to) external returns (uint256 liquidity);\\r\\n\\r\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n    function swap(\\r\\n        uint256 amount0Out,\\r\\n        uint256 amount1Out,\\r\\n        address to,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n\\r\\n    function skim(address to) external;\\r\\n\\r\\n    function sync() external;\\r\\n\\r\\n    function initialize(address, address) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x10ac3d707d8da35610d619bcd0d7fb8bea5cbc55efdd53cc0a968abf1b29f8b9\"},\"contracts/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity =0.5.16;\\r\\n\\r\\n// a library for performing various math operations\\r\\n\\r\\nlibrary Math {\\r\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\r\\n        z = x < y ? x : y;\\r\\n    }\\r\\n\\r\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\r\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\r\\n        if (y > 3) {\\r\\n            z = y;\\r\\n            uint256 x = y / 2 + 1;\\r\\n            while (x < z) {\\r\\n                z = x;\\r\\n                x = (y / x + x) / 2;\\r\\n            }\\r\\n        } else if (y != 0) {\\r\\n            z = 1;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x713f7e1137923117e4895904704c9fda0e77d2296a88543ca002efc1cc04dc3c\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity >=0.5.0 <0.7.0;\\r\\n\\r\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\r\\n\\r\\nlibrary SafeMath {\\r\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\r\\n        require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\r\\n        require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\r\\n    }\\r\\n\\r\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\r\\n        require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x27338a0afa8b6ed4b3d59fba6dbb7ad83eea72024d8f47e570560b5b65d0eb63\"},\"contracts/libraries/UQ112x112.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity =0.5.16;\\r\\n\\r\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\r\\n\\r\\n// range: [0, 2**112 - 1]\\r\\n// resolution: 1 / 2**112\\r\\n\\r\\nlibrary UQ112x112 {\\r\\n    uint224 constant Q112 = 2**112;\\r\\n\\r\\n    // encode a uint112 as a UQ112x112\\r\\n    function encode(uint112 y) internal pure returns (uint224 z) {\\r\\n        z = uint224(y) * Q112; // never overflows\\r\\n    }\\r\\n\\r\\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\\r\\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\\r\\n        z = x / uint224(y);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xa1981ce08319c19106e5fd59a2b2e09cd83453b89136900532bf35563b9bf91e\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051613f32380380613f328339818101604052602081101561003357600080fd5b5051600180546001600160a01b0319166001600160a01b0383161781556005805460ff19168280021790555050613ec38061006f6000396000f3fe608060405234801561001057600080fd5b50600436106100df5760003560e01c8063942dc5731161008c578063d37e510411610066578063d37e51041461025c578063e6a4390514610264578063f46901ed1461029f578063f851a440146102d2576100df565b8063942dc573146101bc578063c19d93fb146101f5578063c9c6539614610221576100df565b80635855a25a116100bd5780635855a25a1461014c578063704b6c02146101545780638198edbf14610189576100df565b8063017e7e58146100e45780631e3dd18b14610115578063574f2ba314610132575b600080fd5b6100ec6102da565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6100ec6004803603602081101561012b57600080fd5b50356102f6565b61013a61032a565b60408051918252519081900360200190f35b61013a610330565b6101876004803603602081101561016a57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166103e1565b005b61013a6004803603602081101561019f57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610530565b610187600480360360408110156101d257600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135610542565b6101fd610699565b6040518082600181111561020d57fe5b60ff16815260200191505060405180910390f35b6100ec6004803603604081101561023757600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160200135166106a2565b610187610aff565b6100ec6004803603604081101561027a57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516610bf9565b610187600480360360208110156102b557600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610c2c565b6100ec610cf9565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b6004818154811061030357fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b60045490565b60405161033f60208201610d15565b6020820181038252601f19601f820116604052506040516020018082805190602001908083835b602083106103a357805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101610366565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040528051906020012081565b73ffffffffffffffffffffffffffffffffffffffff811661046357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f4e6f61683a205a45524f5f414444524553530000000000000000000000000000604482015290519081900360640190fd5b60015473ffffffffffffffffffffffffffffffffffffffff1633146104e957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f61683a20464f5242494444454e0000000000000000000000000000000000604482015290519081900360640190fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60036020526000908152604090205481565b60015473ffffffffffffffffffffffffffffffffffffffff1633146105c857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f61683a20464f5242494444454e0000000000000000000000000000000000604482015290519081900360640190fd5b606481111561063857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f61683a204645455f52454154455f4c494d49540000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8216600081815260036020908152604091829020849055815184815291517fcfb4ca721b9a64dcc3626a15f4a4e53a6b1edd2a79e24527ac117aa8d9f1e4dd9281900390910190a25050565b60055460ff1681565b60008173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561073f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f4e6f61683a204944454e544943414c5f41444452455353455300000000000000604482015290519081900360640190fd5b6000808373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161061077c57838561077f565b84845b909250905073ffffffffffffffffffffffffffffffffffffffff821661080657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f4e6f61683a205a45524f5f414444524553530000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8281166000908152600260209081526040808320858516845290915290205416156108a757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4e6f61683a20504149525f455849535453000000000000000000000000000000604482015290519081900360640190fd5b6060604051806020016108b990610d15565b6020820181038252601f19601f82011660405250905060008383604051602001808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b81526014018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b815260140192505050604051602081830303815290604052805190602001209050808251602084016000f5604080517f485cc95500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8781166004830152868116602483015291519297509087169163485cc9559160448082019260009290919082900301818387803b1580156109e657600080fd5b505af11580156109fa573d6000803e3d6000fd5b50505073ffffffffffffffffffffffffffffffffffffffff80861660008181526002602081815260408084208a87168086529083528185208054978e167fffffffffffffffffffffffff0000000000000000000000000000000000000000988916811790915593835281852086865283528185208054881685179055600480546001810182557f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b01805490981685179097558385526003835293819020601e90559454855192835290820152835191945091927f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9928290030190a35050505092915050565b60015473ffffffffffffffffffffffffffffffffffffffff163314610b8557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f61683a20464f5242494444454e0000000000000000000000000000000000604482015290519081900360640190fd5b600160055460ff166001811115610b9857fe5b1415610bcb57600580547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055610bf7565b600580547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555b565b600260209081526000928352604080842090915290825290205473ffffffffffffffffffffffffffffffffffffffff1681565b60015473ffffffffffffffffffffffffffffffffffffffff163314610cb257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f61683a20464f5242494444454e0000000000000000000000000000000000604482015290519081900360640190fd5b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b61316c80610d238339019056fe60806040526001600c5534801561001557600080fd5b50604051469080605261311a823960408051918290036052018220828201825260088352674e6f6168204c507360c01b6020938401528151808301835260018152603160f81b908401528151808401919091527fe7677cc323ad0d288cca1ec3cf30231ca91d8ff3e3acab8f1b1eae4675d413de818301527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6606082015260808101949094523060a0808601919091528151808603909101815260c09094019052825192019190912060035550600580546001600160a01b03191633179055613017806101036000396000f3fe608060405234801561001057600080fd5b50600436106101b95760003560e01c80636a627842116100f9578063ba9a7a5611610097578063d21220a711610071578063d21220a7146105da578063d505accf146105e2578063dd62ed3e14610640578063fff6cae91461067b576101b9565b8063ba9a7a5614610597578063bc25cf771461059f578063c45a0155146105d2576101b9565b80637ecebe00116100d35780637ecebe00146104d757806389afcb441461050a57806395d89b4114610556578063a9059cbb1461055e576101b9565b80636a6278421461046957806370a082311461049c5780637464fc3d146104cf576101b9565b806323b872dd116101665780633644e515116101405780633644e51514610416578063485cc9551461041e5780635909c0d5146104595780635a3d549314610461576101b9565b806323b872dd146103ad57806330adf81f146103f0578063313ce567146103f8576101b9565b8063095ea7b311610197578063095ea7b3146103155780630dfe16811461036257806318160ddd14610393576101b9565b8063022c0d9f146101be57806306fdde03146102595780630902f1ac146102d6575b600080fd5b610257600480360360808110156101d457600080fd5b81359160208101359173ffffffffffffffffffffffffffffffffffffffff604083013516919081019060808101606082013564010000000081111561021857600080fd5b82018360208201111561022a57600080fd5b8035906020019184600183028401116401000000008311171561024c57600080fd5b509092509050610683565b005b610261610f47565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561029b578181015183820152602001610283565b50505050905090810190601f1680156102c85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102de610f80565b604080516dffffffffffffffffffffffffffff948516815292909316602083015263ffffffff168183015290519081900360600190f35b61034e6004803603604081101561032b57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135610fd5565b604080519115158252519081900360200190f35b61036a610fec565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b61039b611008565b60408051918252519081900360200190f35b61034e600480360360608110156103c357600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135909116906040013561100e565b61039b6110ed565b610400611111565b6040805160ff9092168252519081900360200190f35b61039b611116565b6102576004803603604081101561043457600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602001351661111c565b61039b6111f5565b61039b6111fb565b61039b6004803603602081101561047f57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611201565b61039b600480360360208110156104b257600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611701565b61039b611713565b61039b600480360360208110156104ed57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611719565b61053d6004803603602081101561052057600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661172b565b6040805192835260208301919091528051918290030190f35b610261611cf6565b61034e6004803603604081101561057457600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135611d2f565b61039b611d3c565b610257600480360360208110156105b557600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611d42565b61036a611f38565b61036a611f54565b610257600480360360e08110156105f857600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c00135611f70565b61039b6004803603604081101561065657600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602001351661223c565b610257612259565b600c546001146106f457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4e6f61683a204c4f434b45440000000000000000000000000000000000000000604482015290519081900360640190fd5b6000600c55600554604080517fc19d93fb000000000000000000000000000000000000000000000000000000008152905160019273ffffffffffffffffffffffffffffffffffffffff169163c19d93fb916004808301926020929190829003018186803b15801561076457600080fd5b505afa158015610778573d6000803e3d6000fd5b505050506040513d602081101561078e57600080fd5b5051600181111561079b57fe5b1461080757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4e6f61683a2050454e44494e4700000000000000000000000000000000000000604482015290519081900360640190fd5b60008511806108165750600084115b61088157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4e6f61683a20494e53554646494349454e545f4f55545055545f414d4f554e54604482015290519081900360640190fd5b60008061088c610f80565b5091509150816dffffffffffffffffffffffffffff16871080156108bf5750806dffffffffffffffffffffffffffff1686105b61092a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f4e6f61683a20494e53554646494349454e545f4c495155494449545900000000604482015290519081900360640190fd5b600654600754600091829173ffffffffffffffffffffffffffffffffffffffff91821691908116908916821480159061098f57508073ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff1614155b6109fa57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f4e6f61683a20494e56414c49445f544f00000000000000000000000000000000604482015290519081900360640190fd5b8a15610a0b57610a0b828a8d61243f565b8915610a1c57610a1c818a8c61243f565b8615610afe578873ffffffffffffffffffffffffffffffffffffffff166365380489338d8d8c8c6040518663ffffffff1660e01b8152600401808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509650505050505050600060405180830381600087803b158015610ae557600080fd5b505af1158015610af9573d6000803e3d6000fd5b505050505b604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff8416916370a08231916024808301926020929190829003018186803b158015610b6a57600080fd5b505afa158015610b7e573d6000803e3d6000fd5b505050506040513d6020811015610b9457600080fd5b5051604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905191955073ffffffffffffffffffffffffffffffffffffffff8316916370a0823191602480820192602092909190829003018186803b158015610c0657600080fd5b505afa158015610c1a573d6000803e3d6000fd5b505050506040513d6020811015610c3057600080fd5b5051925060009150506dffffffffffffffffffffffffffff85168a90038311610c5a576000610c70565b89856dffffffffffffffffffffffffffff160383035b9050600089856dffffffffffffffffffffffffffff16038311610c94576000610caa565b89856dffffffffffffffffffffffffffff160383035b90506000821180610cbb5750600081115b610d2657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f4e6f61683a20494e53554646494349454e545f494e5055545f414d4f554e5400604482015290519081900360640190fd5b600554604080517f8198edbf000000000000000000000000000000000000000000000000000000008152306004820152905160009273ffffffffffffffffffffffffffffffffffffffff1691638198edbf916024808301926020929190829003018186803b158015610d9757600080fd5b505afa158015610dab573d6000803e3d6000fd5b505050506040513d6020811015610dc157600080fd5b505190506000610df8610dda858463ffffffff61264c16565b610dec8861271063ffffffff61264c16565b9063ffffffff6126d216565b90506000610e0f610dda858563ffffffff61264c16565b9050610e486305f5e100610e3c6dffffffffffffffffffffffffffff8c8116908c1663ffffffff61264c16565b9063ffffffff61264c16565b610e58838363ffffffff61264c16565b1015610ec557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4e6f61683a204b00000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b505050610ed484848888612744565b60408051838152602081018390528082018d9052606081018c9052905173ffffffffffffffffffffffffffffffffffffffff8b169133917fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229181900360800190a350506001600c55505050505050505050565b6040518060400160405280600881526020017f4e6f6168204c507300000000000000000000000000000000000000000000000081525081565b6008546dffffffffffffffffffffffffffff808216926e0100000000000000000000000000008304909116917c0100000000000000000000000000000000000000000000000000000000900463ffffffff1690565b6000610fe2338484612a0a565b5060015b92915050565b60065473ffffffffffffffffffffffffffffffffffffffff1681565b60005481565b73ffffffffffffffffffffffffffffffffffffffff831660009081526002602090815260408083203384529091528120547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff146110d85773ffffffffffffffffffffffffffffffffffffffff841660009081526002602090815260408083203384529091529020546110a6908363ffffffff6126d216565b73ffffffffffffffffffffffffffffffffffffffff851660009081526002602090815260408083203384529091529020555b6110e3848484612a79565b5060019392505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b60035481565b60055473ffffffffffffffffffffffffffffffffffffffff1633146111a257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f61683a20464f5242494444454e0000000000000000000000000000000000604482015290519081900360640190fd5b6006805473ffffffffffffffffffffffffffffffffffffffff9384167fffffffffffffffffffffffff00000000000000000000000000000000000000009182161790915560078054929093169116179055565b60095481565b600a5481565b6000600c5460011461127457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4e6f61683a204c4f434b45440000000000000000000000000000000000000000604482015290519081900360640190fd5b6000600c55600554604080517fc19d93fb000000000000000000000000000000000000000000000000000000008152905160019273ffffffffffffffffffffffffffffffffffffffff169163c19d93fb916004808301926020929190829003018186803b1580156112e457600080fd5b505afa1580156112f8573d6000803e3d6000fd5b505050506040513d602081101561130e57600080fd5b5051600181111561131b57fe5b1461138757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4e6f61683a2050454e44494e4700000000000000000000000000000000000000604482015290519081900360640190fd5b600080611392610f80565b50600654604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905193955091935060009273ffffffffffffffffffffffffffffffffffffffff909116916370a08231916024808301926020929190829003018186803b15801561140c57600080fd5b505afa158015611420573d6000803e3d6000fd5b505050506040513d602081101561143657600080fd5b5051600754604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905192935060009273ffffffffffffffffffffffffffffffffffffffff909216916370a0823191602480820192602092909190829003018186803b1580156114af57600080fd5b505afa1580156114c3573d6000803e3d6000fd5b505050506040513d60208110156114d957600080fd5b5051905060006114ff836dffffffffffffffffffffffffffff871663ffffffff6126d216565b90506000611523836dffffffffffffffffffffffffffff871663ffffffff6126d216565b905060006115318787612b5a565b6000549091508061156e5761155a6103e8610dec611555878763ffffffff61264c16565b612ce6565b985061156960006103e8612d38565b6115cb565b6115c86dffffffffffffffffffffffffffff8916611592868463ffffffff61264c16565b8161159957fe5b046dffffffffffffffffffffffffffff89166115bb868563ffffffff61264c16565b816115c257fe5b04612de8565b98505b60008911611624576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180612fc06023913960400191505060405180910390fd5b61162e8a8a612d38565b61163a86868a8a612744565b811561167c57600854611678906dffffffffffffffffffffffffffff808216916e01000000000000000000000000000090041663ffffffff61264c16565b600b555b73ffffffffffffffffffffffffffffffffffffffff8a16600090815260016020908152604091829020548251878152918201869052818301819052606082018c9052915133917f94c792774c59479f7bd68442f3af3691c02123a5aabee8b6f9116d8af8aa6669919081900360800190a250506001600c555095979650505050505050565b60016020526000908152604090205481565b600b5481565b60046020526000908152604090205481565b600080600c5460011461179f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4e6f61683a204c4f434b45440000000000000000000000000000000000000000604482015290519081900360640190fd5b6000600c55600554604080517fc19d93fb000000000000000000000000000000000000000000000000000000008152905160019273ffffffffffffffffffffffffffffffffffffffff169163c19d93fb916004808301926020929190829003018186803b15801561180f57600080fd5b505afa158015611823573d6000803e3d6000fd5b505050506040513d602081101561183957600080fd5b5051600181111561184657fe5b146118b257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4e6f61683a2050454e44494e4700000000000000000000000000000000000000604482015290519081900360640190fd5b6000806118bd610f80565b50600654600754604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905194965092945073ffffffffffffffffffffffffffffffffffffffff9182169391169160009184916370a08231916024808301926020929190829003018186803b15801561193f57600080fd5b505afa158015611953573d6000803e3d6000fd5b505050506040513d602081101561196957600080fd5b5051604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905191925060009173ffffffffffffffffffffffffffffffffffffffff8516916370a08231916024808301926020929190829003018186803b1580156119dd57600080fd5b505afa1580156119f1573d6000803e3d6000fd5b505050506040513d6020811015611a0757600080fd5b505130600090815260016020526040812054919250611a268888612b5a565b60005490915080611a3d848763ffffffff61264c16565b81611a4457fe5b049a5080611a58848663ffffffff61264c16565b81611a5f57fe5b04995060008b118015611a72575060008a115b611ac7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180612f9d6023913960400191505060405180910390fd5b611ad13084612e00565b611adc878d8d61243f565b611ae7868d8c61243f565b604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff8916916370a08231916024808301926020929190829003018186803b158015611b5357600080fd5b505afa158015611b67573d6000803e3d6000fd5b505050506040513d6020811015611b7d57600080fd5b5051604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905191965073ffffffffffffffffffffffffffffffffffffffff8816916370a0823191602480820192602092909190829003018186803b158015611bef57600080fd5b505afa158015611c03573d6000803e3d6000fd5b505050506040513d6020811015611c1957600080fd5b50519350611c2985858b8b612744565b8115611c6b57600854611c67906dffffffffffffffffffffffffffff808216916e01000000000000000000000000000090041663ffffffff61264c16565b600b555b73ffffffffffffffffffffffffffffffffffffffff8c166000818152600160209081526040918290205482518f81529182018e905281830181905260608201879052915191929133917f5bebe2aa1be351538a8cbfaf86ec29b94d0230fc94682655767ed405ce4befbb919081900360800190a3505050505050505050506001600c81905550915091565b6040518060400160405280600781526020017f4e6f61682d4c500000000000000000000000000000000000000000000000000081525081565b6000610fe2338484612a79565b6103e881565b600c54600114611db357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4e6f61683a204c4f434b45440000000000000000000000000000000000000000604482015290519081900360640190fd5b6000600c55600654600754600854604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff9485169490931692611e8f9285928792611e8a926dffffffffffffffffffffffffffff169185916370a0823191602480820192602092909190829003018186803b158015611e5257600080fd5b505afa158015611e66573d6000803e3d6000fd5b505050506040513d6020811015611e7c57600080fd5b50519063ffffffff6126d216565b61243f565b600854604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051611f2e9284928792611e8a926e01000000000000000000000000000090046dffffffffffffffffffffffffffff169173ffffffffffffffffffffffffffffffffffffffff8616916370a0823191602480820192602092909190829003018186803b158015611e5257600080fd5b50506001600c5550565b60055473ffffffffffffffffffffffffffffffffffffffff1681565b60075473ffffffffffffffffffffffffffffffffffffffff1681565b42841015611fdf57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4e6f61683a204558504952454400000000000000000000000000000000000000604482015290519081900360640190fd5b60035473ffffffffffffffffffffffffffffffffffffffff80891660008181526004602090815260408083208054600180820190925582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98186015280840196909652958d166060860152608085018c905260a085019590955260c08085018b90528151808603909101815260e0850182528051908301207f19010000000000000000000000000000000000000000000000000000000000006101008601526101028501969096526101228085019690965280518085039096018652610142840180825286519683019690962095839052610162840180825286905260ff89166101828501526101a284018890526101c28401879052519193926101e2808201937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081019281900390910190855afa158015612140573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff8116158015906121bb57508873ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b61222657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4e6f61683a20494e56414c49445f5349474e4154555245000000000000000000604482015290519081900360640190fd5b612231898989612a0a565b505050505050505050565b600260209081526000928352604080842090915290825290205481565b600c546001146122ca57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4e6f61683a204c4f434b45440000000000000000000000000000000000000000604482015290519081900360640190fd5b6000600c55600654604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516124389273ffffffffffffffffffffffffffffffffffffffff16916370a08231916024808301926020929190829003018186803b15801561234157600080fd5b505afa158015612355573d6000803e3d6000fd5b505050506040513d602081101561236b57600080fd5b5051600754604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff909216916370a0823191602480820192602092909190829003018186803b1580156123de57600080fd5b505afa1580156123f2573d6000803e3d6000fd5b505050506040513d602081101561240857600080fd5b50516008546dffffffffffffffffffffffffffff808216916e010000000000000000000000000000900416612744565b6001600c55565b604080518082018252601981527f7472616e7366657228616464726573732c75696e743235362900000000000000602091820152815173ffffffffffffffffffffffffffffffffffffffff85811660248301526044808301869052845180840390910181526064909201845291810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001781529251815160009460609489169392918291908083835b6020831061254557805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101612508565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146125a7576040519150601f19603f3d011682016040523d82523d6000602084013e6125ac565b606091505b50915091508180156125da5750805115806125da57508080602001905160208110156125d757600080fd5b50515b61264557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f61683a205452414e534645525f4641494c45440000000000000000000000604482015290519081900360640190fd5b5050505050565b60008115806126675750508082028282828161266457fe5b04145b610fe657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d6d6174682d6d756c2d6f766572666c6f77000000000000000000000000604482015290519081900360640190fd5b80820382811115610fe657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f64732d6d6174682d7375622d756e646572666c6f770000000000000000000000604482015290519081900360640190fd5b6dffffffffffffffffffffffffffff841180159061277057506dffffffffffffffffffffffffffff8311155b6127db57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e6f61683a204f564552464c4f57000000000000000000000000000000000000604482015290519081900360640190fd5b60085463ffffffff428116917c01000000000000000000000000000000000000000000000000000000009004811682039081161580159061282b57506dffffffffffffffffffffffffffff841615155b801561284657506dffffffffffffffffffffffffffff831615155b156128f6578063ffffffff166128898561285f86612ec5565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff169063ffffffff612ee916565b600980547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff929092169290920201905563ffffffff81166128c98461285f87612ec5565b600a80547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff92909216929092020190555b600880547fffffffffffffffffffffffffffffffffffff0000000000000000000000000000166dffffffffffffffffffffffffffff888116919091177fffffffff0000000000000000000000000000ffffffffffffffffffffffffffff166e0100000000000000000000000000008883168102919091177bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167c010000000000000000000000000000000000000000000000000000000063ffffffff87160217928390556000546040805185851681529290940490921660208201528083019190915290517f17be3acebd510daa18778e1ee1fbaf88237b124dc0803c3be2fd4f99f3e69d33916060908290030190a1505050505050565b73ffffffffffffffffffffffffffffffffffffffff808416600081815260026020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260016020526040902054612aaf908263ffffffff6126d216565b73ffffffffffffffffffffffffffffffffffffffff8085166000908152600160205260408082209390935590841681522054612af1908263ffffffff612f2a16565b73ffffffffffffffffffffffffffffffffffffffff80841660008181526001602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600080600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663017e7e586040518163ffffffff1660e01b815260040160206040518083038186803b158015612bc557600080fd5b505afa158015612bd9573d6000803e3d6000fd5b505050506040513d6020811015612bef57600080fd5b5051600b5473ffffffffffffffffffffffffffffffffffffffff8216158015945091925090612cd2578015612ccd576000612c466115556dffffffffffffffffffffffffffff88811690881663ffffffff61264c16565b90506000612c5383612ce6565b905080821115612cca576000612c81612c72848463ffffffff6126d216565b6000549063ffffffff61264c16565b90506000612ca683612c9a86600263ffffffff61264c16565b9063ffffffff612f2a16565b90506000818381612cb357fe5b0490508015612cc657612cc68782612d38565b5050505b50505b612cde565b8015612cde576000600b555b505092915050565b60006003821115612d29575080600160028204015b81811015612d2357809150600281828581612d1257fe5b040181612d1b57fe5b049050612cfb565b50612d33565b8115612d33575060015b919050565b600054612d4b908263ffffffff612f2a16565b600090815573ffffffffffffffffffffffffffffffffffffffff8316815260016020526040902054612d83908263ffffffff612f2a16565b73ffffffffffffffffffffffffffffffffffffffff831660008181526001602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6000818310612df75781612df9565b825b9392505050565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260016020526040902054612e36908263ffffffff6126d216565b73ffffffffffffffffffffffffffffffffffffffff831660009081526001602052604081209190915554612e70908263ffffffff6126d216565b600090815560408051838152905173ffffffffffffffffffffffffffffffffffffffff8516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef919081900360200190a35050565b6dffffffffffffffffffffffffffff166e0100000000000000000000000000000290565b60006dffffffffffffffffffffffffffff82167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff841681612f2257fe5b049392505050565b80820182811015610fe657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d6d6174682d6164642d6f766572666c6f77000000000000000000000000604482015290519081900360640190fdfe4e6f61683a20494e53554646494349454e545f4c49515549444954595f4255524e45444e6f61683a20494e53554646494349454e545f4c49515549444954595f4d494e544544a265627a7a723158207207f748966ca8531fbba01f9dbfeaf39aebbee15bb357cead4a722df751bcf764736f6c63430005100032454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429a265627a7a7231582050f13daa744de1ad051e1122ff005c1a9a4c31f5b4e8cd0398adf682547afef264736f6c63430005100032",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100df5760003560e01c8063942dc5731161008c578063d37e510411610066578063d37e51041461025c578063e6a4390514610264578063f46901ed1461029f578063f851a440146102d2576100df565b8063942dc573146101bc578063c19d93fb146101f5578063c9c6539614610221576100df565b80635855a25a116100bd5780635855a25a1461014c578063704b6c02146101545780638198edbf14610189576100df565b8063017e7e58146100e45780631e3dd18b14610115578063574f2ba314610132575b600080fd5b6100ec6102da565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6100ec6004803603602081101561012b57600080fd5b50356102f6565b61013a61032a565b60408051918252519081900360200190f35b61013a610330565b6101876004803603602081101561016a57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166103e1565b005b61013a6004803603602081101561019f57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610530565b610187600480360360408110156101d257600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135610542565b6101fd610699565b6040518082600181111561020d57fe5b60ff16815260200191505060405180910390f35b6100ec6004803603604081101561023757600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160200135166106a2565b610187610aff565b6100ec6004803603604081101561027a57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516610bf9565b610187600480360360208110156102b557600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610c2c565b6100ec610cf9565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b6004818154811061030357fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b60045490565b60405161033f60208201610d15565b6020820181038252601f19601f820116604052506040516020018082805190602001908083835b602083106103a357805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101610366565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040528051906020012081565b73ffffffffffffffffffffffffffffffffffffffff811661046357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f4e6f61683a205a45524f5f414444524553530000000000000000000000000000604482015290519081900360640190fd5b60015473ffffffffffffffffffffffffffffffffffffffff1633146104e957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f61683a20464f5242494444454e0000000000000000000000000000000000604482015290519081900360640190fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60036020526000908152604090205481565b60015473ffffffffffffffffffffffffffffffffffffffff1633146105c857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f61683a20464f5242494444454e0000000000000000000000000000000000604482015290519081900360640190fd5b606481111561063857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f61683a204645455f52454154455f4c494d49540000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8216600081815260036020908152604091829020849055815184815291517fcfb4ca721b9a64dcc3626a15f4a4e53a6b1edd2a79e24527ac117aa8d9f1e4dd9281900390910190a25050565b60055460ff1681565b60008173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561073f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f4e6f61683a204944454e544943414c5f41444452455353455300000000000000604482015290519081900360640190fd5b6000808373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161061077c57838561077f565b84845b909250905073ffffffffffffffffffffffffffffffffffffffff821661080657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f4e6f61683a205a45524f5f414444524553530000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8281166000908152600260209081526040808320858516845290915290205416156108a757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4e6f61683a20504149525f455849535453000000000000000000000000000000604482015290519081900360640190fd5b6060604051806020016108b990610d15565b6020820181038252601f19601f82011660405250905060008383604051602001808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b81526014018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b815260140192505050604051602081830303815290604052805190602001209050808251602084016000f5604080517f485cc95500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8781166004830152868116602483015291519297509087169163485cc9559160448082019260009290919082900301818387803b1580156109e657600080fd5b505af11580156109fa573d6000803e3d6000fd5b50505073ffffffffffffffffffffffffffffffffffffffff80861660008181526002602081815260408084208a87168086529083528185208054978e167fffffffffffffffffffffffff0000000000000000000000000000000000000000988916811790915593835281852086865283528185208054881685179055600480546001810182557f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b01805490981685179097558385526003835293819020601e90559454855192835290820152835191945091927f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9928290030190a35050505092915050565b60015473ffffffffffffffffffffffffffffffffffffffff163314610b8557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f61683a20464f5242494444454e0000000000000000000000000000000000604482015290519081900360640190fd5b600160055460ff166001811115610b9857fe5b1415610bcb57600580547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055610bf7565b600580547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555b565b600260209081526000928352604080842090915290825290205473ffffffffffffffffffffffffffffffffffffffff1681565b60015473ffffffffffffffffffffffffffffffffffffffff163314610cb257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f61683a20464f5242494444454e0000000000000000000000000000000000604482015290519081900360640190fd5b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b61316c80610d238339019056fe60806040526001600c5534801561001557600080fd5b50604051469080605261311a823960408051918290036052018220828201825260088352674e6f6168204c507360c01b6020938401528151808301835260018152603160f81b908401528151808401919091527fe7677cc323ad0d288cca1ec3cf30231ca91d8ff3e3acab8f1b1eae4675d413de818301527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6606082015260808101949094523060a0808601919091528151808603909101815260c09094019052825192019190912060035550600580546001600160a01b03191633179055613017806101036000396000f3fe608060405234801561001057600080fd5b50600436106101b95760003560e01c80636a627842116100f9578063ba9a7a5611610097578063d21220a711610071578063d21220a7146105da578063d505accf146105e2578063dd62ed3e14610640578063fff6cae91461067b576101b9565b8063ba9a7a5614610597578063bc25cf771461059f578063c45a0155146105d2576101b9565b80637ecebe00116100d35780637ecebe00146104d757806389afcb441461050a57806395d89b4114610556578063a9059cbb1461055e576101b9565b80636a6278421461046957806370a082311461049c5780637464fc3d146104cf576101b9565b806323b872dd116101665780633644e515116101405780633644e51514610416578063485cc9551461041e5780635909c0d5146104595780635a3d549314610461576101b9565b806323b872dd146103ad57806330adf81f146103f0578063313ce567146103f8576101b9565b8063095ea7b311610197578063095ea7b3146103155780630dfe16811461036257806318160ddd14610393576101b9565b8063022c0d9f146101be57806306fdde03146102595780630902f1ac146102d6575b600080fd5b610257600480360360808110156101d457600080fd5b81359160208101359173ffffffffffffffffffffffffffffffffffffffff604083013516919081019060808101606082013564010000000081111561021857600080fd5b82018360208201111561022a57600080fd5b8035906020019184600183028401116401000000008311171561024c57600080fd5b509092509050610683565b005b610261610f47565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561029b578181015183820152602001610283565b50505050905090810190601f1680156102c85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102de610f80565b604080516dffffffffffffffffffffffffffff948516815292909316602083015263ffffffff168183015290519081900360600190f35b61034e6004803603604081101561032b57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135610fd5565b604080519115158252519081900360200190f35b61036a610fec565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b61039b611008565b60408051918252519081900360200190f35b61034e600480360360608110156103c357600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135909116906040013561100e565b61039b6110ed565b610400611111565b6040805160ff9092168252519081900360200190f35b61039b611116565b6102576004803603604081101561043457600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602001351661111c565b61039b6111f5565b61039b6111fb565b61039b6004803603602081101561047f57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611201565b61039b600480360360208110156104b257600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611701565b61039b611713565b61039b600480360360208110156104ed57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611719565b61053d6004803603602081101561052057600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661172b565b6040805192835260208301919091528051918290030190f35b610261611cf6565b61034e6004803603604081101561057457600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135611d2f565b61039b611d3c565b610257600480360360208110156105b557600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611d42565b61036a611f38565b61036a611f54565b610257600480360360e08110156105f857600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c00135611f70565b61039b6004803603604081101561065657600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602001351661223c565b610257612259565b600c546001146106f457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4e6f61683a204c4f434b45440000000000000000000000000000000000000000604482015290519081900360640190fd5b6000600c55600554604080517fc19d93fb000000000000000000000000000000000000000000000000000000008152905160019273ffffffffffffffffffffffffffffffffffffffff169163c19d93fb916004808301926020929190829003018186803b15801561076457600080fd5b505afa158015610778573d6000803e3d6000fd5b505050506040513d602081101561078e57600080fd5b5051600181111561079b57fe5b1461080757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4e6f61683a2050454e44494e4700000000000000000000000000000000000000604482015290519081900360640190fd5b60008511806108165750600084115b61088157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4e6f61683a20494e53554646494349454e545f4f55545055545f414d4f554e54604482015290519081900360640190fd5b60008061088c610f80565b5091509150816dffffffffffffffffffffffffffff16871080156108bf5750806dffffffffffffffffffffffffffff1686105b61092a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f4e6f61683a20494e53554646494349454e545f4c495155494449545900000000604482015290519081900360640190fd5b600654600754600091829173ffffffffffffffffffffffffffffffffffffffff91821691908116908916821480159061098f57508073ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff1614155b6109fa57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f4e6f61683a20494e56414c49445f544f00000000000000000000000000000000604482015290519081900360640190fd5b8a15610a0b57610a0b828a8d61243f565b8915610a1c57610a1c818a8c61243f565b8615610afe578873ffffffffffffffffffffffffffffffffffffffff166365380489338d8d8c8c6040518663ffffffff1660e01b8152600401808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509650505050505050600060405180830381600087803b158015610ae557600080fd5b505af1158015610af9573d6000803e3d6000fd5b505050505b604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff8416916370a08231916024808301926020929190829003018186803b158015610b6a57600080fd5b505afa158015610b7e573d6000803e3d6000fd5b505050506040513d6020811015610b9457600080fd5b5051604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905191955073ffffffffffffffffffffffffffffffffffffffff8316916370a0823191602480820192602092909190829003018186803b158015610c0657600080fd5b505afa158015610c1a573d6000803e3d6000fd5b505050506040513d6020811015610c3057600080fd5b5051925060009150506dffffffffffffffffffffffffffff85168a90038311610c5a576000610c70565b89856dffffffffffffffffffffffffffff160383035b9050600089856dffffffffffffffffffffffffffff16038311610c94576000610caa565b89856dffffffffffffffffffffffffffff160383035b90506000821180610cbb5750600081115b610d2657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f4e6f61683a20494e53554646494349454e545f494e5055545f414d4f554e5400604482015290519081900360640190fd5b600554604080517f8198edbf000000000000000000000000000000000000000000000000000000008152306004820152905160009273ffffffffffffffffffffffffffffffffffffffff1691638198edbf916024808301926020929190829003018186803b158015610d9757600080fd5b505afa158015610dab573d6000803e3d6000fd5b505050506040513d6020811015610dc157600080fd5b505190506000610df8610dda858463ffffffff61264c16565b610dec8861271063ffffffff61264c16565b9063ffffffff6126d216565b90506000610e0f610dda858563ffffffff61264c16565b9050610e486305f5e100610e3c6dffffffffffffffffffffffffffff8c8116908c1663ffffffff61264c16565b9063ffffffff61264c16565b610e58838363ffffffff61264c16565b1015610ec557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4e6f61683a204b00000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b505050610ed484848888612744565b60408051838152602081018390528082018d9052606081018c9052905173ffffffffffffffffffffffffffffffffffffffff8b169133917fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229181900360800190a350506001600c55505050505050505050565b6040518060400160405280600881526020017f4e6f6168204c507300000000000000000000000000000000000000000000000081525081565b6008546dffffffffffffffffffffffffffff808216926e0100000000000000000000000000008304909116917c0100000000000000000000000000000000000000000000000000000000900463ffffffff1690565b6000610fe2338484612a0a565b5060015b92915050565b60065473ffffffffffffffffffffffffffffffffffffffff1681565b60005481565b73ffffffffffffffffffffffffffffffffffffffff831660009081526002602090815260408083203384529091528120547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff146110d85773ffffffffffffffffffffffffffffffffffffffff841660009081526002602090815260408083203384529091529020546110a6908363ffffffff6126d216565b73ffffffffffffffffffffffffffffffffffffffff851660009081526002602090815260408083203384529091529020555b6110e3848484612a79565b5060019392505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b60035481565b60055473ffffffffffffffffffffffffffffffffffffffff1633146111a257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f61683a20464f5242494444454e0000000000000000000000000000000000604482015290519081900360640190fd5b6006805473ffffffffffffffffffffffffffffffffffffffff9384167fffffffffffffffffffffffff00000000000000000000000000000000000000009182161790915560078054929093169116179055565b60095481565b600a5481565b6000600c5460011461127457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4e6f61683a204c4f434b45440000000000000000000000000000000000000000604482015290519081900360640190fd5b6000600c55600554604080517fc19d93fb000000000000000000000000000000000000000000000000000000008152905160019273ffffffffffffffffffffffffffffffffffffffff169163c19d93fb916004808301926020929190829003018186803b1580156112e457600080fd5b505afa1580156112f8573d6000803e3d6000fd5b505050506040513d602081101561130e57600080fd5b5051600181111561131b57fe5b1461138757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4e6f61683a2050454e44494e4700000000000000000000000000000000000000604482015290519081900360640190fd5b600080611392610f80565b50600654604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905193955091935060009273ffffffffffffffffffffffffffffffffffffffff909116916370a08231916024808301926020929190829003018186803b15801561140c57600080fd5b505afa158015611420573d6000803e3d6000fd5b505050506040513d602081101561143657600080fd5b5051600754604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905192935060009273ffffffffffffffffffffffffffffffffffffffff909216916370a0823191602480820192602092909190829003018186803b1580156114af57600080fd5b505afa1580156114c3573d6000803e3d6000fd5b505050506040513d60208110156114d957600080fd5b5051905060006114ff836dffffffffffffffffffffffffffff871663ffffffff6126d216565b90506000611523836dffffffffffffffffffffffffffff871663ffffffff6126d216565b905060006115318787612b5a565b6000549091508061156e5761155a6103e8610dec611555878763ffffffff61264c16565b612ce6565b985061156960006103e8612d38565b6115cb565b6115c86dffffffffffffffffffffffffffff8916611592868463ffffffff61264c16565b8161159957fe5b046dffffffffffffffffffffffffffff89166115bb868563ffffffff61264c16565b816115c257fe5b04612de8565b98505b60008911611624576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180612fc06023913960400191505060405180910390fd5b61162e8a8a612d38565b61163a86868a8a612744565b811561167c57600854611678906dffffffffffffffffffffffffffff808216916e01000000000000000000000000000090041663ffffffff61264c16565b600b555b73ffffffffffffffffffffffffffffffffffffffff8a16600090815260016020908152604091829020548251878152918201869052818301819052606082018c9052915133917f94c792774c59479f7bd68442f3af3691c02123a5aabee8b6f9116d8af8aa6669919081900360800190a250506001600c555095979650505050505050565b60016020526000908152604090205481565b600b5481565b60046020526000908152604090205481565b600080600c5460011461179f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4e6f61683a204c4f434b45440000000000000000000000000000000000000000604482015290519081900360640190fd5b6000600c55600554604080517fc19d93fb000000000000000000000000000000000000000000000000000000008152905160019273ffffffffffffffffffffffffffffffffffffffff169163c19d93fb916004808301926020929190829003018186803b15801561180f57600080fd5b505afa158015611823573d6000803e3d6000fd5b505050506040513d602081101561183957600080fd5b5051600181111561184657fe5b146118b257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4e6f61683a2050454e44494e4700000000000000000000000000000000000000604482015290519081900360640190fd5b6000806118bd610f80565b50600654600754604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905194965092945073ffffffffffffffffffffffffffffffffffffffff9182169391169160009184916370a08231916024808301926020929190829003018186803b15801561193f57600080fd5b505afa158015611953573d6000803e3d6000fd5b505050506040513d602081101561196957600080fd5b5051604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905191925060009173ffffffffffffffffffffffffffffffffffffffff8516916370a08231916024808301926020929190829003018186803b1580156119dd57600080fd5b505afa1580156119f1573d6000803e3d6000fd5b505050506040513d6020811015611a0757600080fd5b505130600090815260016020526040812054919250611a268888612b5a565b60005490915080611a3d848763ffffffff61264c16565b81611a4457fe5b049a5080611a58848663ffffffff61264c16565b81611a5f57fe5b04995060008b118015611a72575060008a115b611ac7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180612f9d6023913960400191505060405180910390fd5b611ad13084612e00565b611adc878d8d61243f565b611ae7868d8c61243f565b604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff8916916370a08231916024808301926020929190829003018186803b158015611b5357600080fd5b505afa158015611b67573d6000803e3d6000fd5b505050506040513d6020811015611b7d57600080fd5b5051604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905191965073ffffffffffffffffffffffffffffffffffffffff8816916370a0823191602480820192602092909190829003018186803b158015611bef57600080fd5b505afa158015611c03573d6000803e3d6000fd5b505050506040513d6020811015611c1957600080fd5b50519350611c2985858b8b612744565b8115611c6b57600854611c67906dffffffffffffffffffffffffffff808216916e01000000000000000000000000000090041663ffffffff61264c16565b600b555b73ffffffffffffffffffffffffffffffffffffffff8c166000818152600160209081526040918290205482518f81529182018e905281830181905260608201879052915191929133917f5bebe2aa1be351538a8cbfaf86ec29b94d0230fc94682655767ed405ce4befbb919081900360800190a3505050505050505050506001600c81905550915091565b6040518060400160405280600781526020017f4e6f61682d4c500000000000000000000000000000000000000000000000000081525081565b6000610fe2338484612a79565b6103e881565b600c54600114611db357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4e6f61683a204c4f434b45440000000000000000000000000000000000000000604482015290519081900360640190fd5b6000600c55600654600754600854604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff9485169490931692611e8f9285928792611e8a926dffffffffffffffffffffffffffff169185916370a0823191602480820192602092909190829003018186803b158015611e5257600080fd5b505afa158015611e66573d6000803e3d6000fd5b505050506040513d6020811015611e7c57600080fd5b50519063ffffffff6126d216565b61243f565b600854604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051611f2e9284928792611e8a926e01000000000000000000000000000090046dffffffffffffffffffffffffffff169173ffffffffffffffffffffffffffffffffffffffff8616916370a0823191602480820192602092909190829003018186803b158015611e5257600080fd5b50506001600c5550565b60055473ffffffffffffffffffffffffffffffffffffffff1681565b60075473ffffffffffffffffffffffffffffffffffffffff1681565b42841015611fdf57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4e6f61683a204558504952454400000000000000000000000000000000000000604482015290519081900360640190fd5b60035473ffffffffffffffffffffffffffffffffffffffff80891660008181526004602090815260408083208054600180820190925582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98186015280840196909652958d166060860152608085018c905260a085019590955260c08085018b90528151808603909101815260e0850182528051908301207f19010000000000000000000000000000000000000000000000000000000000006101008601526101028501969096526101228085019690965280518085039096018652610142840180825286519683019690962095839052610162840180825286905260ff89166101828501526101a284018890526101c28401879052519193926101e2808201937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081019281900390910190855afa158015612140573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff8116158015906121bb57508873ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b61222657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4e6f61683a20494e56414c49445f5349474e4154555245000000000000000000604482015290519081900360640190fd5b612231898989612a0a565b505050505050505050565b600260209081526000928352604080842090915290825290205481565b600c546001146122ca57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4e6f61683a204c4f434b45440000000000000000000000000000000000000000604482015290519081900360640190fd5b6000600c55600654604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516124389273ffffffffffffffffffffffffffffffffffffffff16916370a08231916024808301926020929190829003018186803b15801561234157600080fd5b505afa158015612355573d6000803e3d6000fd5b505050506040513d602081101561236b57600080fd5b5051600754604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff909216916370a0823191602480820192602092909190829003018186803b1580156123de57600080fd5b505afa1580156123f2573d6000803e3d6000fd5b505050506040513d602081101561240857600080fd5b50516008546dffffffffffffffffffffffffffff808216916e010000000000000000000000000000900416612744565b6001600c55565b604080518082018252601981527f7472616e7366657228616464726573732c75696e743235362900000000000000602091820152815173ffffffffffffffffffffffffffffffffffffffff85811660248301526044808301869052845180840390910181526064909201845291810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001781529251815160009460609489169392918291908083835b6020831061254557805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101612508565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146125a7576040519150601f19603f3d011682016040523d82523d6000602084013e6125ac565b606091505b50915091508180156125da5750805115806125da57508080602001905160208110156125d757600080fd5b50515b61264557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f61683a205452414e534645525f4641494c45440000000000000000000000604482015290519081900360640190fd5b5050505050565b60008115806126675750508082028282828161266457fe5b04145b610fe657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d6d6174682d6d756c2d6f766572666c6f77000000000000000000000000604482015290519081900360640190fd5b80820382811115610fe657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f64732d6d6174682d7375622d756e646572666c6f770000000000000000000000604482015290519081900360640190fd5b6dffffffffffffffffffffffffffff841180159061277057506dffffffffffffffffffffffffffff8311155b6127db57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e6f61683a204f564552464c4f57000000000000000000000000000000000000604482015290519081900360640190fd5b60085463ffffffff428116917c01000000000000000000000000000000000000000000000000000000009004811682039081161580159061282b57506dffffffffffffffffffffffffffff841615155b801561284657506dffffffffffffffffffffffffffff831615155b156128f6578063ffffffff166128898561285f86612ec5565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff169063ffffffff612ee916565b600980547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff929092169290920201905563ffffffff81166128c98461285f87612ec5565b600a80547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff92909216929092020190555b600880547fffffffffffffffffffffffffffffffffffff0000000000000000000000000000166dffffffffffffffffffffffffffff888116919091177fffffffff0000000000000000000000000000ffffffffffffffffffffffffffff166e0100000000000000000000000000008883168102919091177bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167c010000000000000000000000000000000000000000000000000000000063ffffffff87160217928390556000546040805185851681529290940490921660208201528083019190915290517f17be3acebd510daa18778e1ee1fbaf88237b124dc0803c3be2fd4f99f3e69d33916060908290030190a1505050505050565b73ffffffffffffffffffffffffffffffffffffffff808416600081815260026020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260016020526040902054612aaf908263ffffffff6126d216565b73ffffffffffffffffffffffffffffffffffffffff8085166000908152600160205260408082209390935590841681522054612af1908263ffffffff612f2a16565b73ffffffffffffffffffffffffffffffffffffffff80841660008181526001602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600080600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663017e7e586040518163ffffffff1660e01b815260040160206040518083038186803b158015612bc557600080fd5b505afa158015612bd9573d6000803e3d6000fd5b505050506040513d6020811015612bef57600080fd5b5051600b5473ffffffffffffffffffffffffffffffffffffffff8216158015945091925090612cd2578015612ccd576000612c466115556dffffffffffffffffffffffffffff88811690881663ffffffff61264c16565b90506000612c5383612ce6565b905080821115612cca576000612c81612c72848463ffffffff6126d216565b6000549063ffffffff61264c16565b90506000612ca683612c9a86600263ffffffff61264c16565b9063ffffffff612f2a16565b90506000818381612cb357fe5b0490508015612cc657612cc68782612d38565b5050505b50505b612cde565b8015612cde576000600b555b505092915050565b60006003821115612d29575080600160028204015b81811015612d2357809150600281828581612d1257fe5b040181612d1b57fe5b049050612cfb565b50612d33565b8115612d33575060015b919050565b600054612d4b908263ffffffff612f2a16565b600090815573ffffffffffffffffffffffffffffffffffffffff8316815260016020526040902054612d83908263ffffffff612f2a16565b73ffffffffffffffffffffffffffffffffffffffff831660008181526001602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6000818310612df75781612df9565b825b9392505050565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260016020526040902054612e36908263ffffffff6126d216565b73ffffffffffffffffffffffffffffffffffffffff831660009081526001602052604081209190915554612e70908263ffffffff6126d216565b600090815560408051838152905173ffffffffffffffffffffffffffffffffffffffff8516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef919081900360200190a35050565b6dffffffffffffffffffffffffffff166e0100000000000000000000000000000290565b60006dffffffffffffffffffffffffffff82167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff841681612f2257fe5b049392505050565b80820182811015610fe657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d6d6174682d6164642d6f766572666c6f77000000000000000000000000604482015290519081900360640190fdfe4e6f61683a20494e53554646494349454e545f4c49515549444954595f4255524e45444e6f61683a20494e53554646494349454e545f4c49515549444954595f4d494e544544a265627a7a723158207207f748966ca8531fbba01f9dbfeaf39aebbee15bb357cead4a722df751bcf764736f6c63430005100032454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429a265627a7a7231582050f13daa744de1ad051e1122ff005c1a9a4c31f5b4e8cd0398adf682547afef264736f6c63430005100032",
  "devdoc": {
    "methods": {}
  },
  "userdoc": {
    "methods": {}
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 403,
        "contract": "contracts/NoahFactory.sol:NoahFactory",
        "label": "feeTo",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 405,
        "contract": "contracts/NoahFactory.sol:NoahFactory",
        "label": "admin",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 411,
        "contract": "contracts/NoahFactory.sol:NoahFactory",
        "label": "getPair",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_address))"
      },
      {
        "astId": 415,
        "contract": "contracts/NoahFactory.sol:NoahFactory",
        "label": "getFeeRate",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 418,
        "contract": "contracts/NoahFactory.sol:NoahFactory",
        "label": "allPairs",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 420,
        "contract": "contracts/NoahFactory.sol:NoahFactory",
        "label": "state",
        "offset": 0,
        "slot": "5",
        "type": "t_enum(State)1962"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_enum(State)1962": {
        "encoding": "inplace",
        "label": "enum INoahFactory.State",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_address)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}